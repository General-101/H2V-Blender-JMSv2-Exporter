from datetime import datetime
import bpy
import os
from os.path import exists as file_exists
import xml.etree.ElementTree as xml
from xml.dom import minidom

def WriteHeader():
    header = xml.Element("Header")
    
    MainRev = xml.SubElement(header, "MainRev")
    MainRev.text = "0"
    PointRev = xml.SubElement(header, "PointRev")
    PointRev.text = "6"
    Description = xml.SubElement(header, "Description")
    Description.text = "Description", "Created By Osoyoos SideCar Gen v1.0"
    Created = xml.SubElement(header, "Created")
    Created.text = datetime.now()
    By = xml.SubElement(header, "By")
    By.text = os.getlogin()
    DirectoryType = xml.SubElement(header, "DirectoryType")
    DirectoryType.text = "TAE.Shared.NWOAssetDirectory"
    SchemaText = xml.SubElement(header, "Schema")
    SchemaText.text = "1"

    return header

def GetObjectOutputTypes():
    OutputTagCollection = xml.Element("OutputTagCollection")
    return OutputTagCollection

def WriteFolders():
    folders = xml.Element("Folders")

    Reference = xml.SubElement(folders, "Reference")
    Reference.text = "\\reference"
    Temp = xml.SubElement(folders, "Temp")
    Temp.text = "\\temp"
    SourceModels = xml.SubElement(folders, "SourceModels")
    SourceModels.text = "\\work"
    GameModels = xml.SubElement(folders, "GameModels")
    GameModels.text = "\\render"
    GamePhysicsModels = xml.SubElement(folders, "GamePhysicsModels")
    GamePhysicsModels.text = "\\physics"
    GameCollisionModels = xml.SubElement(folders, "GameCollisionModels")
    GameCollisionModels.text = "\\collision"
    ExportModels = xml.SubElement(folders, "ExportModels")
    ExportModels.text = "\\render"
    ExportPhysicsModels = xml.SubElement(folders, "ExportPhysicsModles")
    ExportPhysicsModels.text = "\\physics"
    ExportCollisionModels = xml.SubElement(folders, "ExportCollisionModels")
    ExportCollisionModels.text = "\\collision"
    SourceAnimations = xml.SubElement(folders, "SourceAnimations")
    SourceAnimations.text = "\\animations\\work"
    AnimationRigs = xml.SubElement(folders, "AnimationRigs")
    AnimationRigs.text = "\\animations\\rigs"
    GameAnimations = xml.SubElement(folders, "GameAnimations")
    GameAnimations.text = "\\animations"
    ExportAnimations = xml.SubElement(folders, "ExportAnimations")
    ExportAnimations.text = "\\animations"
    SourceBitmaps = xml.SubElement(folders, "SourceBitmaps")
    SourceBitmaps.text = "\\bitmaps"
    GameBitmaps = xml.SubElement(folders, "GameBitmaps")
    GameBitmaps.text = "\\bitmaps"
    CinemaSource = xml.SubElement(folders, "CinemaSource")
    CinemaSource.text = "\\cinematics"
    CinemaExport = xml.SubElement(folders, "CinemaExport")
    CinemaExport.text = "\\cinematics"
    ExportBSPs = xml.SubElement(folders, "ExportBSPs")
    ExportBSPs.text = "\\"
    SourceBSPs = xml.SubElement(folders, "SourceBSPs")
    SourceBSPs.text = "\\"
    Scripts = xml.SubElement(folders, "Scripts")
    Scripts.text = "\\scripts"

    return folders

def WriteFaceCollections(regions=False, materials=False):
    faceCollections = xml.Element("FaceCollections")
    return faceCollections

def IntermediateFileExists(folderName):
    filePath = "fullPath" + "\\" + folderName

    for fname in os.listdir(filePath):
        if fname.endswith('.gr2'):
            return True
        else:
            return False

def export_xml(report, filePath=""):
    print("temp")
    GenerateModelSidecar("")

def GenerateModelSidecar(assetName=""):
    root = minidom.Document()

    xml = root.createElement("Metadata")
    root.appendChild(xml)

    xml.appendChild(WriteHeader())

    asset = root.createElement("Asset")
    asset.setAttribute("Name", assetName)
    asset.setAttribute("Type", "model")
    asset.appendChild(GetObjectOutputTypes())
    xml.appendChild(asset)

    xml.appendChild(WriteFolders())
    xml.appendChild(WriteFaceCollections(True, True))

    content = root.createElement("Contents")
    content.appendChild(GetModelContentObjects())
    xml.appendChild(content)

    xml_str = root.toprettyxml(indent ="\t") 

    save_path_file = "sidecar.xml"
  
    with open(save_path_file, "w") as f:
        f.write(xml_str) 

def GetModelContentObjects():
    temp = []

    if(IntermediateFileExists("render")):
        temp.append(CreateContentObject("render"))

    if(IntermediateFileExists("physics")):
        temp.append(CreateContentObject("physics"))

    if(IntermediateFileExists("collision")):
        temp.append(CreateContentObject("collision"))

    if(IntermediateFileExists("markers")):
        temp.append(CreateContentObject("markers"))

    if(IntermediateFileExists("skeleton")):
        temp.append(CreateContentObject("skeleton"))

    if(IntermediateFileExists("animations\\JMM") or IntermediateFileExists("animations\\JMA") or IntermediateFileExists("animations\\JMT") or IntermediateFileExists("animations\\JMZ") or IntermediateFileExists("animations\\JMV")
        or IntermediateFileExists("animations\\JMO (Keyframe)") or IntermediateFileExists("animations\\JMO (Pose)") or IntermediateFileExists("animations\\JMR (Object)") or IntermediateFileExists("animations\\JMR (Local)")):
        animations = xml.Element("ContentObject")
        animations.set("Name", "")
        animations.set("Type" "model_animation_graph")

        if(IntermediateFileExists("animations\\JMM")):
            animations.append(CreateContentObject("animations\\JMM", "Base", "ModelAnimationMovementData", "None", "", ""))

        if(IntermediateFileExists("animations\\JMA")):
            animations.append(CreateContentObject("animations\\JMA", "Base", "ModelAnimationMovementData", "XY", "", ""))

        if(IntermediateFileExists("animations\\JMT")):
            animations.append(CreateContentObject("animations\\JMT", "Base", "ModelAnimationMovementData", "XYYaw", "", ""))

        if(IntermediateFileExists("animations\\JMZ")):
            animations.append(CreateContentObject("animations\\JMZ", "Base", "ModelAnimationMovementData", "XYZYaw", "", ""))

        if(IntermediateFileExists("animations\\JMV")):
            animations.append(CreateContentObject("animations\\JMV", "Base", "ModelAnimationMovementData", "XYZFullRotation", "", ""))

        if(IntermediateFileExists("animations\\JMO (Keyframe)")):
            animations.append(CreateContentObject("animations\\JMO (Keyframe)", "Overlay", "ModelAnimationOverlayType", "Keyframe", "ModelAnimationOverlayBlending", "Additive"))

        if(IntermediateFileExists("animations\\JMO (Pose)")):
            animations.append(CreateContentObject("animations\\JMO (Pose)", "Overlay", "ModelAnimationOverlayType", "Pose", "ModelAnimationOverlayBlending", "Additive"))

        if(IntermediateFileExists("animations\\JMR (Local)")):
            animations.append(CreateContentObject("animations\\JMR (Local)", "Overlay", "ModelAnimationOverlayType", "keyframe", "ModelAnimationOverlayBlending", "ReplacementLocalSpace"))

        if(IntermediateFileExists("animations\\JMR (Object)")):
            animations.append(CreateContentObject("animations\\JMR (Object)", "Overlay", "ModelAnimationOverlayType", "keyframe", "ModelAnimationOverlayBlending", "ReplacementObjectSpace"))

        r2 = xml.Element("OutputTagCollection")
        outputTag1 = xml.SubElement(r2, "OutputTag")
        outputTag1.set("Type", "frame_event_list")
        outputTag1.text = "dataPath" + "\\" + "assetName"
        outputTag2 = xml.SubElement(r2, "OutputTag")
        outputTag2.set("Type", "model_animation_graph")
        outputTag2.text = "dataPath" + "\\" + "assetName"

        animations.append(r2)
        temp.append(animations)

    ContentObjects = xml.Element("Content")
    ContentObjects.set("Name", "assetName")
    ContentObjects.set("Type", "model")

    for e in temp:
        ContentObjects.append(e)

    return ContentObjects

def CreateContentObject(type):
    print("")


def save(operator, context, report,
        filepath="",
        use_selection=False,
        use_visible=False,
        use_active_collection=False,
        batch_mode='OFF',
        use_batch_own_dir=False,
        **kwargs
        ):
    export_xml(report, filepath)
    return {'FINISHED'}